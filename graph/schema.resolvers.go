package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"
	"github.com/google/uuid"
	"github.com/sanoyo/ultrachat/graph/model"
)

// SendMessage is the resolver for the sendMessage field.
func (r *mutationResolver) SendMessage(ctx context.Context, message string) (*model.ChatMessage, error) {
	// DynamoDBクライアントを作成
	svc := dynamodb.New(
		session.Must(session.NewSession()),
		&aws.Config{
			Endpoint: aws.String("http://localhost:8000"), // DynamoDB Localを起動している場合
			Region:   aws.String("ap-northeast-1"),        // 任意のリージョンを指定
		},
	)

	// ChatMessageオブジェクトを作成
	item := &model.ChatMessage{
		ID:        "1",
		Message:   "Hello, world!",
		CreatedAt: time.Now().Format(time.RFC3339),
	}

	// DynamoDBに書き込むためのマップを作成
	av, err := dynamodbattribute.MarshalMap(item)
	if err != nil {
		log.Fatalf("failed to marshal ChatMessage item: %v", err)
	}

	// DynamoDBに書き込み
	input := &dynamodb.PutItemInput{
		Item:      av,
		TableName: aws.String("ChatMessages"), // 任意のテーブル名を指定
	}
	_, err = svc.PutItemWithContext(context.Background(), input)
	if err != nil {
		log.Fatalf("failed to put item: %v", err)
	}

	fmt.Println("put item succeeded")

	return item, nil
}

// GetChatMessages is the resolver for the getChatMessages field.
func (r *queryResolver) GetChatMessages(ctx context.Context) ([]*model.ChatMessage, error) {
	message := model.ChatMessage{
		ID:      "1",
		Message: "Hello, world!",
	}

	return []*model.ChatMessage{&message}, nil
}

// MessageSent is the resolver for the messageSent field.
func (r *subscriptionResolver) MessageSent(ctx context.Context) (<-chan *model.ChatMessage, error) {
	msgChan := make(chan *model.ChatMessage)

	// 新しいチャットメッセージを生成してチャネルに送信するゴルーチンを起動
	go func() {
		for {
			time.Sleep(time.Second) // 1秒ごとに新しいメッセージを生成
			msg := &model.ChatMessage{
				ID:        uuid.NewString(),
				Message:   fmt.Sprintf("New message at %v", time.Now()),
				CreatedAt: time.Now().Format(time.RFC3339),
			}
			msgChan <- msg // メッセージをチャネルに送信
		}
	}()

	return msgChan, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
