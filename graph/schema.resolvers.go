package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"
	"github.com/google/uuid"
	"github.com/sanoyo/ultrachat/graph/model"
)

// SendMessage is the resolver for the sendMessage field.
func (r *mutationResolver) SendMessage(ctx context.Context, message string) (*model.ChatMessage, error) {
	id := uuid.NewString()
	err := r.dynamoClient.PutItemWithContext(ctx, "ChatMessages", &model.ChatMessage{
		ID:        id,
		Message:   message,
		CreatedAt: time.Now().Format(time.RFC3339),
	})
	if err != nil {
		return nil, err
	}

	return &model.ChatMessage{
		ID:        id,
		Message:   message,
		CreatedAt: time.Now().Format(time.RFC3339),
	}, nil
}

// CreateSpace is the resolver for the createSpace field.
func (r *mutationResolver) CreateSpace(ctx context.Context, name string) (*model.Space, error) {
	panic(fmt.Errorf("not implemented: CreateSpace - createSpace"))
}

// GetChatMessages is the resolver for the getChatMessages field.
func (r *queryResolver) GetChatMessages(ctx context.Context) ([]*model.ChatMessage, error) {
	result, err := r.dynamoClient.GetItemsWithContext(ctx, "ChatMessages")
	if err != nil {
		return nil, err
	}

	model := []*model.ChatMessage{}
	if err := dynamodbattribute.UnmarshalListOfMaps(result, &model); err != nil {
		return nil, err
	}

	return model, nil
}

// MessageSent is the resolver for the messageSent field.
func (r *subscriptionResolver) MessageSent(ctx context.Context) (<-chan *model.ChatMessage, error) {
	msgChan := make(chan *model.ChatMessage)

	// 新しいチャットメッセージを生成してチャネルに送信するゴルーチンを起動
	go func() {
		for {
			time.Sleep(time.Second) // 1秒ごとに新しいメッセージを生成
			msg := &model.ChatMessage{
				ID:        uuid.NewString(),
				Message:   fmt.Sprintf("New message at %v", time.Now()),
				CreatedAt: time.Now().Format(time.RFC3339),
			}
			msgChan <- msg // メッセージをチャネルに送信
		}
	}()

	return msgChan, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
