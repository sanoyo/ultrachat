package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// UserInvitation represents a row from 'ultrachat.user_invitations'.
type UserInvitation struct {
	UserInvitationID string `json:"userInvitationId"` // userInvitationId
	SenderID         string `json:"senderId"`         // senderId
	ReceiverID       string `json:"receiverId"`       // receiverId
	SpaceID          string `json:"spaceId"`          // spaceId
	Status           string `json:"status"`           // status
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the UserInvitation exists in the database.
func (ui *UserInvitation) Exists() bool {
	return ui._exists
}

// Deleted returns true when the UserInvitation has been marked for deletion from
// the database.
func (ui *UserInvitation) Deleted() bool {
	return ui._deleted
}

// Insert inserts the UserInvitation to the database.
func (ui *UserInvitation) Insert(ctx context.Context, db DB) error {
	switch {
	case ui._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ui._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO ultrachat.user_invitations (` +
		`userInvitationId, senderId, receiverId, spaceId, status` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, ui.UserInvitationID, ui.SenderID, ui.ReceiverID, ui.SpaceID, ui.Status)
	if _, err := db.ExecContext(ctx, sqlstr, ui.UserInvitationID, ui.SenderID, ui.ReceiverID, ui.SpaceID, ui.Status); err != nil {
		return logerror(err)
	}
	// set exists
	ui._exists = true
	return nil
}

// Update updates a UserInvitation in the database.
func (ui *UserInvitation) Update(ctx context.Context, db DB) error {
	switch {
	case !ui._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ui._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE ultrachat.user_invitations SET ` +
		`senderId = ?, receiverId = ?, spaceId = ?, status = ? ` +
		`WHERE userInvitationId = ?`
	// run
	logf(sqlstr, ui.SenderID, ui.ReceiverID, ui.SpaceID, ui.Status, ui.UserInvitationID)
	if _, err := db.ExecContext(ctx, sqlstr, ui.SenderID, ui.ReceiverID, ui.SpaceID, ui.Status, ui.UserInvitationID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the UserInvitation to the database.
func (ui *UserInvitation) Save(ctx context.Context, db DB) error {
	if ui.Exists() {
		return ui.Update(ctx, db)
	}
	return ui.Insert(ctx, db)
}

// Upsert performs an upsert for UserInvitation.
func (ui *UserInvitation) Upsert(ctx context.Context, db DB) error {
	switch {
	case ui._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO ultrachat.user_invitations (` +
		`userInvitationId, senderId, receiverId, spaceId, status` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`userInvitationId = VALUES(userInvitationId), senderId = VALUES(senderId), receiverId = VALUES(receiverId), spaceId = VALUES(spaceId), status = VALUES(status)`
	// run
	logf(sqlstr, ui.UserInvitationID, ui.SenderID, ui.ReceiverID, ui.SpaceID, ui.Status)
	if _, err := db.ExecContext(ctx, sqlstr, ui.UserInvitationID, ui.SenderID, ui.ReceiverID, ui.SpaceID, ui.Status); err != nil {
		return logerror(err)
	}
	// set exists
	ui._exists = true
	return nil
}

// Delete deletes the UserInvitation from the database.
func (ui *UserInvitation) Delete(ctx context.Context, db DB) error {
	switch {
	case !ui._exists: // doesn't exist
		return nil
	case ui._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM ultrachat.user_invitations ` +
		`WHERE userInvitationId = ?`
	// run
	logf(sqlstr, ui.UserInvitationID)
	if _, err := db.ExecContext(ctx, sqlstr, ui.UserInvitationID); err != nil {
		return logerror(err)
	}
	// set deleted
	ui._deleted = true
	return nil
}

// UserInvitationsByReceiverID retrieves a row from 'ultrachat.user_invitations' as a UserInvitation.
//
// Generated from index 'receiverId'.
func UserInvitationsByReceiverID(ctx context.Context, db DB, receiverID string) ([]*UserInvitation, error) {
	// query
	const sqlstr = `SELECT ` +
		`userInvitationId, senderId, receiverId, spaceId, status ` +
		`FROM ultrachat.user_invitations ` +
		`WHERE receiverId = ?`
	// run
	logf(sqlstr, receiverID)
	rows, err := db.QueryContext(ctx, sqlstr, receiverID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*UserInvitation
	for rows.Next() {
		ui := UserInvitation{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ui.UserInvitationID, &ui.SenderID, &ui.ReceiverID, &ui.SpaceID, &ui.Status); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ui)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// UserInvitationsBySenderID retrieves a row from 'ultrachat.user_invitations' as a UserInvitation.
//
// Generated from index 'senderId'.
func UserInvitationsBySenderID(ctx context.Context, db DB, senderID string) ([]*UserInvitation, error) {
	// query
	const sqlstr = `SELECT ` +
		`userInvitationId, senderId, receiverId, spaceId, status ` +
		`FROM ultrachat.user_invitations ` +
		`WHERE senderId = ?`
	// run
	logf(sqlstr, senderID)
	rows, err := db.QueryContext(ctx, sqlstr, senderID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*UserInvitation
	for rows.Next() {
		ui := UserInvitation{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ui.UserInvitationID, &ui.SenderID, &ui.ReceiverID, &ui.SpaceID, &ui.Status); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ui)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// UserInvitationsBySpaceID retrieves a row from 'ultrachat.user_invitations' as a UserInvitation.
//
// Generated from index 'spaceId'.
func UserInvitationsBySpaceID(ctx context.Context, db DB, spaceID string) ([]*UserInvitation, error) {
	// query
	const sqlstr = `SELECT ` +
		`userInvitationId, senderId, receiverId, spaceId, status ` +
		`FROM ultrachat.user_invitations ` +
		`WHERE spaceId = ?`
	// run
	logf(sqlstr, spaceID)
	rows, err := db.QueryContext(ctx, sqlstr, spaceID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*UserInvitation
	for rows.Next() {
		ui := UserInvitation{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ui.UserInvitationID, &ui.SenderID, &ui.ReceiverID, &ui.SpaceID, &ui.Status); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ui)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// UserInvitationByUserInvitationID retrieves a row from 'ultrachat.user_invitations' as a UserInvitation.
//
// Generated from index 'user_invitations_userInvitationId_pkey'.
func UserInvitationByUserInvitationID(ctx context.Context, db DB, userInvitationID string) (*UserInvitation, error) {
	// query
	const sqlstr = `SELECT ` +
		`userInvitationId, senderId, receiverId, spaceId, status ` +
		`FROM ultrachat.user_invitations ` +
		`WHERE userInvitationId = ?`
	// run
	logf(sqlstr, userInvitationID)
	ui := UserInvitation{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, userInvitationID).Scan(&ui.UserInvitationID, &ui.SenderID, &ui.ReceiverID, &ui.SpaceID, &ui.Status); err != nil {
		return nil, logerror(err)
	}
	return &ui, nil
}

// User returns the User associated with the UserInvitation's (SenderID).
//
// Generated from foreign key 'user_invitations_ibfk_1'.
func (ui *UserInvitation) User(ctx context.Context, db DB) (*User, error) {
	return UserByUserID(ctx, db, ui.SenderID)
}

// User returns the User associated with the UserInvitation's (ReceiverID).
//
// Generated from foreign key 'user_invitations_ibfk_2'.
func (ui *UserInvitation) User(ctx context.Context, db DB) (*User, error) {
	return UserByUserID(ctx, db, ui.ReceiverID)
}

// Space returns the Space associated with the UserInvitation's (SpaceID).
//
// Generated from foreign key 'user_invitations_ibfk_3'.
func (ui *UserInvitation) Space(ctx context.Context, db DB) (*Space, error) {
	return SpaceBySpaceID(ctx, db, ui.SpaceID)
}
